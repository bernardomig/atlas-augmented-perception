// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: detectionservice.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Atlas.Augmented {
  public static partial class DetectionService
  {
    static readonly string __ServiceName = "atlas.augmented.DetectionService";

    static readonly grpc::Marshaller<global::Atlas.Augmented.DetectionServiceRequest> __Marshaller_DetectionServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Atlas.Augmented.DetectionServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Atlas.Augmented.DetectionServiceResponse> __Marshaller_DetectionServiceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Atlas.Augmented.DetectionServiceResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Atlas.Augmented.DetectionServiceRequest, global::Atlas.Augmented.DetectionServiceResponse> __Method_GetDetectedObjects = new grpc::Method<global::Atlas.Augmented.DetectionServiceRequest, global::Atlas.Augmented.DetectionServiceResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetDetectedObjects",
        __Marshaller_DetectionServiceRequest,
        __Marshaller_DetectionServiceResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Atlas.Augmented.DetectionserviceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DetectionService</summary>
    public abstract partial class DetectionServiceBase
    {
      public virtual global::System.Threading.Tasks.Task GetDetectedObjects(global::Atlas.Augmented.DetectionServiceRequest request, grpc::IServerStreamWriter<global::Atlas.Augmented.DetectionServiceResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DetectionService</summary>
    public partial class DetectionServiceClient : grpc::ClientBase<DetectionServiceClient>
    {
      /// <summary>Creates a new client for DetectionService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DetectionServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DetectionService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DetectionServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DetectionServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DetectionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Atlas.Augmented.DetectionServiceResponse> GetDetectedObjects(global::Atlas.Augmented.DetectionServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDetectedObjects(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Atlas.Augmented.DetectionServiceResponse> GetDetectedObjects(global::Atlas.Augmented.DetectionServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetDetectedObjects, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DetectionServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DetectionServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DetectionServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetDetectedObjects, serviceImpl.GetDetectedObjects).Build();
    }

  }
}
#endregion
