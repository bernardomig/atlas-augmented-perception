# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: detectionservice.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import detectedobject_pb2 as detectedobject__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='detectionservice.proto',
  package='atlas.augmented',
  syntax='proto3',
  serialized_pb=_b('\n\x16\x64\x65tectionservice.proto\x12\x0f\x61tlas.augmented\x1a\x14\x64\x65tectedobject.proto\"\x19\n\x17\x44\x65tectionServiceRequest\"L\n\x18\x44\x65tectionServiceResponse\x12\x30\n\x07objects\x18\x01 \x03(\x0b\x32\x1f.atlas.augmented.DetectedObject2\x81\x01\n\x10\x44\x65tectionService\x12m\n\x12GetDetectedObjects\x12(.atlas.augmented.DetectionServiceRequest\x1a).atlas.augmented.DetectionServiceResponse\"\x00\x30\x01\x62\x06proto3')
  ,
  dependencies=[detectedobject__pb2.DESCRIPTOR,])




_DETECTIONSERVICEREQUEST = _descriptor.Descriptor(
  name='DetectionServiceRequest',
  full_name='atlas.augmented.DetectionServiceRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=65,
  serialized_end=90,
)


_DETECTIONSERVICERESPONSE = _descriptor.Descriptor(
  name='DetectionServiceResponse',
  full_name='atlas.augmented.DetectionServiceResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='objects', full_name='atlas.augmented.DetectionServiceResponse.objects', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=92,
  serialized_end=168,
)

_DETECTIONSERVICERESPONSE.fields_by_name['objects'].message_type = detectedobject__pb2._DETECTEDOBJECT
DESCRIPTOR.message_types_by_name['DetectionServiceRequest'] = _DETECTIONSERVICEREQUEST
DESCRIPTOR.message_types_by_name['DetectionServiceResponse'] = _DETECTIONSERVICERESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

DetectionServiceRequest = _reflection.GeneratedProtocolMessageType('DetectionServiceRequest', (_message.Message,), dict(
  DESCRIPTOR = _DETECTIONSERVICEREQUEST,
  __module__ = 'detectionservice_pb2'
  # @@protoc_insertion_point(class_scope:atlas.augmented.DetectionServiceRequest)
  ))
_sym_db.RegisterMessage(DetectionServiceRequest)

DetectionServiceResponse = _reflection.GeneratedProtocolMessageType('DetectionServiceResponse', (_message.Message,), dict(
  DESCRIPTOR = _DETECTIONSERVICERESPONSE,
  __module__ = 'detectionservice_pb2'
  # @@protoc_insertion_point(class_scope:atlas.augmented.DetectionServiceResponse)
  ))
_sym_db.RegisterMessage(DetectionServiceResponse)



_DETECTIONSERVICE = _descriptor.ServiceDescriptor(
  name='DetectionService',
  full_name='atlas.augmented.DetectionService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=171,
  serialized_end=300,
  methods=[
  _descriptor.MethodDescriptor(
    name='GetDetectedObjects',
    full_name='atlas.augmented.DetectionService.GetDetectedObjects',
    index=0,
    containing_service=None,
    input_type=_DETECTIONSERVICEREQUEST,
    output_type=_DETECTIONSERVICERESPONSE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_DETECTIONSERVICE)

DESCRIPTOR.services_by_name['DetectionService'] = _DETECTIONSERVICE

# @@protoc_insertion_point(module_scope)
